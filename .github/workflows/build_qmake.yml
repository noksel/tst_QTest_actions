name: QMake Build Matrix

on: [push]

env:
  QT_VERSION: 5.12.8
  APP_PRO: test_qtest.pro
  APP_NAME: test_qtest
  VS_srp: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
#        - {
#            name: "Windows Latest x64", artifact: "Windows-x64.zip",
#            os: windows-latest,
#            environment_script: "D:/a/tst_QTest_actions/tst_QTest_actions/qt5/5.12.8/mingw73_64/bin/qtenv2.bat"
#          }
        - {
            name: "Linux Latest x64", artifact: "Linux-x64.zip",
            os: ubuntu-latest
          }

    steps:
    - uses: actions/checkout@v1

    - name: Installing system libs
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Linux")
          execute_process(
            COMMAND sudo apt install libgl1-mesa-dev libicu-dev libicu55 libicu56
          )
        endif()

    - name: Download Qt
      id: qt
      shell: cmake -P {0}
      run: |
        set(qt_version $ENV{QT_VERSION})

        string(REPLACE "." "" qt_version_dotless "${qt_version}")
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          if ("${{ matrix.config.environment_script }}" MATCHES "qtenv2.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win64_mingw73")
            set(qt_dir_prefix "${qt_version}/mingw73_64")
          elseif ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
            set(qt_package_name "qt.qt5.${qt_version_dotless}.win32_msvc2017")
            set(qt_dir_prefix "${qt_version}/msvc2017")
          else()
          endif()
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.gcc_64")
          set(qt_dir_prefix "${qt_version}/gcc_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_name "qt.qt5.${qt_version_dotless}.clang_64")
          set(qt_dir_prefix "${qt_version}/clang_64")
        endif()

        set(qt_base_url "https://download.qt.io/online/qtsdkrepository/${url_os}/desktop/qt5_${qt_version_dotless}")
        file(DOWNLOAD "${qt_base_url}/Updates.xml" ./Updates.xml SHOW_PROGRESS)

        message( ${qt_package_name} )
        file(READ ./Updates.xml updates_xml)
        if ("${{ runner.os }}" STREQUAL "Windows")
         string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+Mingw[a-zA-Z0-9_-]+).7z"
           updates_xml_output "${updates_xml}")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          string(REGEX MATCH "<Name>${qt_package_name}.*<Version>([0-9+-.]+)</Version>.*<DownloadableArchives>qtbase([a-zA-Z0-9_-]+).7z"
            updates_xml_output "${updates_xml}")        
        endif()
        set(package_version ${CMAKE_MATCH_1})
        set(package_suffix ${CMAKE_MATCH_2})
        string(REPLACE "-debug-symbols" "" package_suffix "${package_suffix}")

        # Workaround for CMake's greedy regex
        if ("${{ matrix.config.environment_script }}" MATCHES "vcvars32.bat")
          string(REPLACE "X86_64" "X86" package_suffix "${package_suffix}")
        endif()

        file(MAKE_DIRECTORY qt5)

        # Save the path for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/qt5/${qt_dir_prefix}" qt_dir)
        message("::set-output name=qt_dir::${qt_dir}")

        foreach(package qtbase qtdeclarative qttools qtsvg)
          file(DOWNLOAD
            "${qt_base_url}/${qt_package_name}/${package_version}${package}${package_suffix}.7z" ./${package}.7z
            SHOW_PROGRESS
          )
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../${package}.7z WORKING_DIRECTORY qt5)
        endforeach()
        
        if ("${{ runner.os }}" STREQUAL "Windows")
          file(DOWNLOAD
              "https://download.qt.io/online/qtsdkrepository/windows_x86/desktop/tools_mingw/qt.tools.win64_mingw730/7.3.0-1x86_64-7.3.0-release-posix-seh-rt_v5-rev0.7z" ./minwg.7z
              SHOW_PROGRESS
            )
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../minwg.7z WORKING_DIRECTORY qt5)
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          message( "${qt_base_url}/${qt_package_name}/${package_version}icu${package_suffix}.7z" )
          
          file(DOWNLOAD
            "${qt_base_url}/${qt_package_name}/5.12.8-0-202003131355icu-linux-Rhel7.2-x64.7z" ./icu.7z
            SHOW_PROGRESS
          )
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ../icu.7z WORKING_DIRECTORY qt5)
        endif() 

        

        file(READ "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" qtconfig)
        string(REPLACE "Enterprise" "OpenSource" qtconfig "${qtconfig}")
        string(REPLACE "licheck.exe" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck64" "" qtconfig "${qtconfig}")
        string(REPLACE "licheck_mac" "" qtconfig "${qtconfig}")
        file(WRITE "qt5/${qt_dir_prefix}/mkspecs/qconfig.pri" "${qtconfig}")

    - name: Configure
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}/qt5/Tools/mingw730_64/bin/;$ENV{PATH}")
        endif()
        set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/;$ENV{PATH}")
        set(ENV{QTDIR} "${{ steps.qt.outputs.qt_dir }}")
        message( $ENV{PATH} )      
        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "$ENV{VS_srp}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          
          execute_process(
            COMMAND "$ENV{VS_srp}" && set
            OUTPUT_VARIABLE envtxt
          )
          message( ${envtxt} )
          
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")

              # Set for other steps
              message("::set-env name=${CMAKE_MATCH_1}::${CMAKE_MATCH_2}")
            endif()
          endforeach()
        endif()
        
        set(ENV{QTDIR} "${{ steps.qt.outputs.qt_dir }}")
        message( $ENV{PATH} )
        
        if ("${{ runner.os }}" STREQUAL "Windows")
          set( spec "-makefile -spec ${{ steps.qt.outputs.qt_dir }}/mkspecs/win32-g++" )
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set( spec "-makefile -spec linux-g++-64" )
        endif()
        execute_process(COMMAND ls .)
        execute_process(COMMAND ${{ steps.qt.outputs.qt_dir }}/bin/qmake --version OUTPUT_VARIABLE FOO)
        message( ${FOO} )
        
        execute_process(COMMAND ls -l /home/qt/work/install)
        execute_process(COMMAND ls -l /home/qt/work/install/lib)
        
        message ($ENV{QTDIR})
        message ("!!")
        execute_process(
          COMMAND ${{ steps.qt.outputs.qt_dir }}/bin/qmake CONFIG+=release $ENV{APP_PRO}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()
        execute_process(COMMAND ls .)
        
    - name: Build
      shell: cmake -P {0}
      run: |
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/;$ENV{PATH}")
        else()
          set(ENV{PATH} "${{ steps.qt.outputs.qt_dir }}/bin/:$ENV{PATH}")
        endif()
        
        include(ProcessorCount)
        ProcessorCount(N)
        
        execute_process(COMMAND ls $ENV{GITHUB_WORKSPACE})
        execute_process(COMMAND ls qt5/)

        set(make_program make -j ${N})
        execute_process(
          COMMAND ${make_program} -f Makefile.Release
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()

        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/$ENV{APP_NAME}-$ENV{QT_VERSION}-${{ matrix.config.artifact }}" artifact)

        execute_process(COMMAND
          ${CMAKE_COMMAND} -E tar cvf ${artifact} --format=zip "${{ steps.qt_creator.outputs.qtc_binary_name }}"
          WORKING_DIRECTORY "${{ steps.qt_creator.outputs.qtc_output_directory }}"
        )

    - uses: actions/upload-artifact@v1
      id: upload_artifact
      with:
        path: ./${{ env.APP_NAME }}-${{ env.QT_VERSION }}-${{ matrix.config.artifact }}
        name: ${{ env.APP_NAME}}-${{ env.QT_VERSION }}-${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v1
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')

    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
        - {
            name: "Windows Latest x64", artifact: "Windows-x64.zip",
            os: windows-latest
          }
#        - {
#            name: "Linux Latest x64", artifact: "Linux-x64.zip",
#            os: ubuntu-latest
#          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: ${{ env.APP_NAME }}-${{ env.QT_VERSION }}-${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v1
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ env.APP_NAME }}-${{ env.QT_VERSION }}-${{ matrix.config.artifact }}
        asset_name: ${{ env.APP_NAME }}-${{ env.QT_VERSION }}-${{ matrix.config.artifact }}
        asset_content_type: application/zip
